import matplotlib.pyplot as plt
import math
from configuration import obstacle
import cv2



def plot_curve(Xi, Yi, Thetai, UL, UR, clearance, color = 'blue'):
    t = 0
    r = 0.038
    L = 0.354
    dt = 0.1
    Xn = Xi
    Yn = Yi
    Thetan = 3.14 * Thetai / 180

    # Xi, Yi,Thetai: Input point's coordinates
    # Xs, Ys: Start point coordinates for plot function
    # Xn, Yn, Thetan: End point coordintes
    D = 0
    plot_x_list = [Xn]
    plot_y_list = [Yn]
    while t < 1:
        t = t + dt
        Xs = Xn
        Ys = Yn
        Xn += 0.5 * r * (UL + UR) * math.cos(Thetan) * dt
        Xn = round(Xn * 32) / 32
        plot_x_list.append(Xn)
        Yn += 0.5 * r * (UL + UR) * math.sin(Thetan) * dt
        Yn = round(Yn * 32) / 32
        plot_y_list.append(Yn)
        Thetan += (r / L) * (UR - UL) * dt
        Thetan = round(Thetan * 8) / 8
        if obstacle(Xn, Yn, clearance):
            return False

    plt.plot(plot_x_list, plot_y_list, color)
    plt.savefig('load.png')
    Thetan = 180 * (Thetan) / 3.14
    return True

# actions = [[5, 5], [10, 10], [5, 0], [0, 5], [5, 10], [10, 5]]
#
# path = [(0, 0, 0, 0, 0), (1.0625, 0.8125, 78.875, 1.375, 30, 40), (1.3125, 0.6875, -157.625, 0.0, 30, 0), (1.53125, 0.46875, 437.125, 0.0, 0, 30), (1.78125, 0.34375, -157.625, 0.0, 30, 0), (2.0, 0.125, 437.125, 0.0, 0, 30), (2.25, 0.0, -157.625, 0.0, 30, 0), (2.1875, 0.28125, -28.625, 0.0, 30, 0), (2.28125, 0.59375, 566.125, 0.0, 0, 30), (2.5, 0.375, 437.125, 0.0, 0, 30), (2.75, 0.25, -157.625, 0.0, 30, 0), (2.6875, 0.53125, -28.625, 0.0, 30, 0), (2.78125, 0.84375, 566.125, 0.0, 0, 30), (3.0, 0.625, 437.125, 0.0, 0, 30), (3.34375, 2.34375, 78.875, 1.375, 40, 40), (3.59375, 2.21875, -157.625, 0.0, 30, 0), (3.53125, 2.5, -28.625, 0.0, 30, 0), (3.625, 2.8125, 566.125, 0.0, 0, 30), (3.5625, 3.09375, -28.625, 0.0, 30, 0), (3.65625, 3.40625, 566.125, 0.0, 0, 30), (3.59375, 3.6875, -28.625, 0.0, 30, 0), (3.6875, 4.0, 566.125, 0.0, 0, 30), (3.90625, 3.78125, 437.125, 0.0, 0, 30), (4.15625, 3.65625, -157.625, 0.0, 30, 0), (4.375, 3.4375, 437.125, 0.0, 0, 30), (4.625, 3.3125, -157.625, 0.0, 30, 0), (4.5625, 3.59375, -28.625, 0.0, 30, 0), (4.65625, 3.90625, 566.125, 0.0, 0, 30), (4.875, 3.6875, 437.125, 0.0, 0, 30), (5.125, 3.5625, -157.625, 0.0, 30, 0), (5.34375, 3.34375, 437.125, 0.0, 0, 30), (5.59375, 3.21875, -157.625, 0.0, 30, 0), (5.53125, 3.5, -28.625, 0.0, 30, 0), (5.625, 3.8125, 566.125, 0.0, 0, 30), (5.84375, 3.59375, 437.125, 0.0, 0, 30), (6.09375, 3.46875, -157.625, 0.0, 30, 0), (6.03125, 3.75, -28.625, 0.0, 30, 0), (5.84375, 3.53125, 100.375, 0.0, 30, 0), (6.125, 3.5, -136.125, 0.0, 30, 0), (6.40625, 3.375, 458.625, 0.0, 0, 30), (6.6875, 3.34375, -136.125, 0.0, 30, 0), (6.53125, 3.59375, -7.125, 0.0, 30, 0), (6.5, 3.90625, 587.625, 0.0, 0, 30), (6.34375, 4.15625, -7.125, 0.0, 30, 0), (6.3125, 4.46875, 587.625, 0.0, 0, 30), (6.59375, 4.34375, 458.625, 0.0, 0, 30), (6.875, 4.3125, -136.125, 0.0, 30, 0), (6.71875, 4.5625, -7.125, 0.0, 30, 0), (6.6875, 4.875, 587.625, 0.0, 0, 30), (6.53125, 5.125, -7.125, 0.0, 30, 0), (6.5, 5.4375, 587.625, 0.0, 0, 30), (6.34375, 5.6875, -7.125, 0.0, 30, 0), (6.3125, 6.0, 587.625, 0.0, 0, 30), (6.59375, 5.875, 458.625, 0.0, 0, 30), (6.875, 5.84375, -136.125, 0.0, 30, 0), (6.71875, 6.09375, -7.125, 0.0, 30, 0), (6.6875, 6.40625, 587.625, 0.0, 0, 30), (6.96875, 6.28125, 458.625, 0.0, 0, 30), (7.25, 6.25, -136.125, 0.0, 30, 0), (7.09375, 6.5, -7.125, 0.0, 30, 0), (7.0625, 6.8125, 587.625, 0.0, 0, 30), (7.34375, 6.6875, 458.625, 0.0, 0, 30), (7.625, 6.65625, -136.125, 0.0, 30, 0), (7.46875, 6.90625, -7.125, 0.0, 30, 0), (7.4375, 7.21875, 587.625, 0.0, 0, 30), (7.71875, 7.09375, 458.625, 0.0, 0, 30), (8.0, 7.0625, -136.125, 0.0, 30, 0), (7.84375, 7.3125, -7.125, 0.0, 30, 0), (7.8125, 7.625, 587.625, 0.0, 0, 30), (7.65625, 7.875, -7.125, 0.0, 30, 0), (7.625, 8.1875, 587.625, 0.0, 0, 30), (7.90625, 8.0625, 458.625, 0.0, 0, 30), (8.1875, 8.03125, -136.125, 0.0, 30, 0), (8.03125, 8.28125, -7.125, 0.0, 30, 0), (8.0, 8.59375, 587.625, 0.0, 0, 30), (8.28125, 8.46875, 458.625, 0.0, 0, 30)]
def plot_path(path, out):
    i = 0
    while i < len(path) - 1:
        plot_curve(path[i][0], path[i][1], path[i][2], path[i + 1][4], path[i + 1][5], 0.2, 'red')
        i += 1
        plt.savefig('load.png')
        img = cv2.imread('load.png')
        out.write(img)
        cv2.imshow('...', img)
        cv2.waitKey(1)
#

# for action in actions:
#    X1= plot_curve(0,0,45, action[0],action[1]) # (0,0,45) hypothetical start configuration
#    for action in actions:
#       X2=plot_curve(X1[0],X1[1],X1[2], action[0],action[1])
i = 0
# while i < len(path)-1:
#     X1 = plot_curve(path[i][0], path[i][1], path[i][2], path[i + 1][-2], path[i + 1][-1])
#     i+=1
# X1 = plot_curve(0,0,0,50,50)
# X1 = plot_curve(1.9, 0, 0, 100,50)


